'use client'

import { Header } from '@/components/dashboard/Header'
import { Button } from '@/components/ui/Button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card'
import { NewJourneyModal } from '@/components/journey/NewJourneyModal'
import { AuthGuard } from '@/components/auth/AuthGuard'
import { PlusIcon, MapIcon, BookTemplateIcon, UsersIcon, BookOpenIcon, XIcon, CheckCircleIcon, CircleIcon, BarChart3Icon, ClockIcon, ActivityIcon, TrendingUpIcon } from 'lucide-react'
import React, { useState, useMemo } from 'react'
import Link from 'next/link'
import { useJourneyStore } from '@/store/journey-store'
import { useLanguage } from '@/contexts/LanguageContext'

export default function Home() {
  const [isNewJourneyModalOpen, setIsNewJourneyModalOpen] = useState(false)
  const [isOnboardingVisible, setIsOnboardingVisible] = useState(true)
  const [completedTasks, setCompletedTasks] = useState<string[]>([])
  const { journeys } = useJourneyStore()
  const { t, language } = useLanguage()

  // Load completed tasks from localStorage on mount
  React.useEffect(() => {
    const saved = localStorage.getItem('cx-onboarding-completed-tasks')
    if (saved) {
      setCompletedTasks(JSON.parse(saved))
    }

    const onboardingDismissed = localStorage.getItem('cx-onboarding-dismissed')
    if (onboardingDismissed === 'true') {
      setIsOnboardingVisible(false)
    }
  }, [])

  // Save completed tasks to localStorage when changed
  React.useEffect(() => {
    localStorage.setItem('cx-onboarding-completed-tasks', JSON.stringify(completedTasks))
  }, [completedTasks])

  // Save onboarding visibility to localStorage
  React.useEffect(() => {
    localStorage.setItem('cx-onboarding-dismissed', isOnboardingVisible ? 'false' : 'true')
  }, [isOnboardingVisible])

  // Onboarding tasks
  const onboardingTasks = useMemo(() => [
    {
      id: 'explore-glossary',
      title: t('onboarding.task1.title'),
      description: t('onboarding.task1.description'),
      icon: BookOpenIcon,
      href: '/glossary',
      completed: completedTasks.includes('explore-glossary')
    },
    {
      id: 'create-persona',
      title: t('onboarding.task2.title'),
      description: t('onboarding.task2.description'),
      icon: UsersIcon,
      href: '/personas/create',
      completed: completedTasks.includes('create-persona')
    },
    {
      id: 'browse-templates',
      title: t('onboarding.task3.title'),
      description: t('onboarding.task3.description'),
      icon: BookTemplateIcon,
      href: '/templates',
      completed: completedTasks.includes('browse-templates')
    },
    {
      id: 'create-journey',
      title: t('onboarding.task4.title'),
      description: t('onboarding.task4.description'),
      icon: MapIcon,
      action: () => setIsNewJourneyModalOpen(true),
      completed: journeys.length > 0
    }
  ], [completedTasks, journeys.length, t])

  const completedTasksCount = onboardingTasks.filter(task => task.completed).length
  const progressPercentage = (completedTasksCount / onboardingTasks.length) * 100

  const markTaskAsCompleted = (taskId: string) => {
    if (!completedTasks.includes(taskId)) {
      setCompletedTasks(prev => [...prev, taskId])
    }
  }

  const handleTaskClick = (task: any) => {
    markTaskAsCompleted(task.id)

    if (task.href) {
      // Navigate to the href
      window.location.href = task.href
    } else if (task.action) {
      // Execute the action
      task.action()
    }
  }


  return (
    <AuthGuard>
      <div className="h-full flex flex-col bg-gray-50">
      <Header 
        title={t('dashboard.title')} 
        description={t('dashboard.subtitle')}
        actions={
          <Link href="/journey-maps/new">
            <Button variant="primary">
              <PlusIcon className="mr-2 h-4 w-4" />
              {t('common.startNewJourneyMap')}
            </Button>
          </Link>
        }
      />
      
      <div className="flex-1 p-6 overflow-auto bg-gray-50">
        {/* Interactive Onboarding */}
        {isOnboardingVisible && completedTasksCount < 4 && (
          <div className="mb-8">
            <Card className="border-0 shadow-sm bg-white">
              <CardHeader className="pb-4">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <CardTitle className="text-lg font-semibold text-gray-900 mb-2">
                      {t('onboarding.welcomeTitle')}
                    </CardTitle>
                    <p className="text-sm text-gray-600 mb-4">{t('onboarding.welcomeSubtitle')}</p>

                    {/* Progress Bar */}
                    <div className="flex items-center space-x-3">
                      <div className="flex-1 bg-slate-100 rounded-full h-2">
                        <div
                          className="bg-slate-600 h-2 rounded-full transition-all duration-500"
                          style={{ width: `${progressPercentage}%` }}
                        ></div>
                      </div>
                      <span className="text-sm text-slate-600 font-medium">
                        {completedTasksCount}/{onboardingTasks.length}
                      </span>
                    </div>
                  </div>

                  <button
                    onClick={() => setIsOnboardingVisible(false)}
                    className="p-1 hover:bg-slate-100 rounded-lg transition-colors ml-4"
                    aria-label={t('onboarding.dismiss')}
                  >
                    <XIcon className="w-4 h-4 text-slate-400" />
                  </button>
                </div>
              </CardHeader>

              <CardContent className="pt-0">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {onboardingTasks.map((task) => (
                    <button
                      key={task.id}
                      onClick={() => handleTaskClick(task)}
                      disabled={task.completed}
                      className={`group relative p-3 rounded-lg border transition-all duration-200 text-left w-full ${
                        task.completed
                          ? 'bg-slate-50 border-slate-200 cursor-default'
                          : 'bg-white border-slate-200 hover:border-slate-300 hover:bg-slate-50 cursor-pointer'
                      }`}
                    >
                      <div className="flex items-center space-x-3">
                        <div className={`flex-shrink-0 w-8 h-8 rounded-lg flex items-center justify-center ${
                          task.completed
                            ? 'bg-slate-200'
                            : 'bg-slate-100 group-hover:bg-slate-200'
                        } transition-colors`}>
                          <task.icon className={`w-4 h-4 ${
                            task.completed ? 'text-slate-700' : 'text-slate-600'
                          }`} />
                        </div>

                        <div className="flex-1 min-w-0">
                          <h3 className="text-sm font-medium text-gray-900">{task.title}</h3>
                          <p className="text-xs text-gray-500 mt-0.5">{task.description}</p>
                        </div>

                        <div className="flex items-center space-x-2">
                          <span
                            className={`text-xs px-3 py-1 rounded-md font-medium transition-colors ${
                              task.completed
                                ? 'bg-slate-200 text-slate-700'
                                : 'bg-slate-600 text-white group-hover:bg-slate-700'
                            }`}
                          >
                            {task.completed ? t('onboarding.completed') : t('onboarding.startTask')}
                          </span>

                          <div className="flex-shrink-0">
                            {task.completed ? (
                              <CheckCircleIcon className="w-5 h-5 text-slate-600" />
                            ) : (
                              <CircleIcon className="w-5 h-5 text-slate-300" />
                            )}
                          </div>
                        </div>
                      </div>
                    </button>
                  ))}
                </div>

                {progressPercentage === 100 && (
                  <div className="mt-6 p-4 bg-slate-50 rounded-lg border border-slate-200">
                    <div className="flex items-center space-x-3">
                      <CheckCircleIcon className="w-6 h-6 text-slate-600" />
                      <div>
                        <h3 className="text-sm font-semibold text-slate-900">{t('onboarding.congratulations')}</h3>
                        <p className="text-xs text-slate-600">{t('onboarding.allTasksComplete')}</p>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        )}

        {/* Dashboard - Simplified onboarding approach */}
        {(!isOnboardingVisible || completedTasksCount === 4) && (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Journey Maps - Always show but focus on first creation */}
            <Card className="border-0 shadow-sm hover:shadow-md transition-shadow duration-200">
              <CardContent className="pt-6">
                {journeys.length === 0 ? (
                  <div className="text-center py-12">
                    <div className="w-16 h-16 mx-auto mb-4 bg-slate-100 rounded-2xl flex items-center justify-center">
                      <MapIcon className="w-8 h-8 text-slate-400" />
                    </div>
                    <h3 className="text-lg font-medium text-gray-900 mb-2">{t('dashboard.createFirstJourneyTitle')}</h3>
                    <p className="text-sm text-gray-500 mb-6">{t('dashboard.createFirstJourneyDesc')}</p>
                    <Button
                      onClick={() => setIsNewJourneyModalOpen(true)}
                      className="bg-slate-900 hover:bg-slate-800"
                    >
                      <PlusIcon className="mr-2 h-4 w-4" />
                      {t('dashboard.createJourneyMap')}
                    </Button>
                  </div>
                ) : (
                  <div>
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-lg font-medium text-gray-900">{t('dashboard.myJourneyMaps')}</h3>
                      <Button variant="outline" size="sm" onClick={() => setIsNewJourneyModalOpen(true)}>
                        <PlusIcon className="mr-2 h-4 w-4" />
                        {t('dashboard.new')}
                      </Button>
                    </div>
                    <div className="space-y-3">
                      {journeys.slice(0, 3).map((journey) => (
                        <Link key={journey.id} href={`/journey-maps/${journey.id}`}>
                          <div className="flex items-center justify-between p-3 hover:bg-slate-50 rounded-lg cursor-pointer transition-colors border border-slate-100 hover:border-slate-200">
                            <div className="min-w-0 flex-1">
                              <p className="font-medium text-gray-900 truncate">{journey.title}</p>
                              <p className="text-xs text-gray-500">{journey.touchpoints.length} touchpoints</p>
                            </div>
                            <div className="ml-4">
                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                journey.touchpoints.length > 0 ? 'bg-emerald-100 text-emerald-700' : 'bg-gray-100 text-gray-600'
                              }`}>
                                {journey.touchpoints.length > 0 ? t('dashboard.active') : t('dashboard.empty')}
                              </span>
                            </div>
                          </div>
                        </Link>
                      ))}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Personas - Always show but focus on first creation */}
            <Card className="border-0 shadow-sm hover:shadow-md transition-shadow duration-200">
              <CardContent className="pt-6">
                <div className="text-center py-12">
                  <div className="w-16 h-16 mx-auto mb-4 bg-slate-100 rounded-2xl flex items-center justify-center">
                    <UsersIcon className="w-8 h-8 text-slate-400" />
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">{t('dashboard.createFirstPersonaTitle')}</h3>
                  <p className="text-sm text-gray-500 mb-6">{t('dashboard.createFirstPersonaDesc')}</p>
                  <Link href="/personas/create">
                    <Button className="bg-slate-900 hover:bg-slate-800">
                      <PlusIcon className="mr-2 h-4 w-4" />
                      {t('dashboard.createPersona')}
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>

            {/* Getting Started / Quick Actions */}
            <Card className="border-0 shadow-sm hover:shadow-md transition-shadow duration-200">
              <CardContent className="pt-6">
                <div className="text-center mb-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-2">{t('dashboard.getStarted')}</h3>
                  <p className="text-sm text-gray-500">{t('dashboard.exploreTools')}</p>
                </div>
                <div className="space-y-3">
                  <Link href="/templates">
                    <div className="flex items-center p-3 hover:bg-slate-50 rounded-lg cursor-pointer transition-colors border border-slate-100 hover:border-slate-200">
                      <div className="w-10 h-10 bg-slate-100 rounded-lg flex items-center justify-center mr-3">
                        <BookTemplateIcon className="w-5 h-5 text-slate-600" />
                      </div>
                      <div>
                        <p className="font-medium text-gray-900">{t('dashboard.exploreTemplates')}</p>
                        <p className="text-xs text-gray-500">{t('dashboard.useReadyMaps')}</p>
                      </div>
                    </div>
                  </Link>

                  <Link href="/glossary">
                    <div className="flex items-center p-3 hover:bg-slate-50 rounded-lg cursor-pointer transition-colors border border-slate-100 hover:border-slate-200">
                      <div className="w-10 h-10 bg-slate-100 rounded-lg flex items-center justify-center mr-3">
                        <BookOpenIcon className="w-5 h-5 text-slate-600" />
                      </div>
                      <div>
                        <p className="font-medium text-gray-900">{t('dashboard.readGlossary')}</p>
                        <p className="text-xs text-gray-500">{t('dashboard.learnTerminology')}</p>
                      </div>
                    </div>
                  </Link>
                </div>
              </CardContent>
            </Card>
            </div>
          </div>
        )}
      </div>
      
      <NewJourneyModal
        isOpen={isNewJourneyModalOpen}
        onClose={() => setIsNewJourneyModalOpen(false)}
      />
      
      </div>
    </AuthGuard>
  )
}
